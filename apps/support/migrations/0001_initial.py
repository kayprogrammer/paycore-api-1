# Generated by Django 5.2.6 on 2025-10-19 01:55

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="CannedResponse",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted_at", models.DateTimeField(null=True)),
                (
                    "response_id",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("title", models.CharField(max_length=200)),
                ("content", models.TextField()),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("account", "Account Issues"),
                            ("wallet", "Wallet & Balance"),
                            ("transaction", "Transaction Issues"),
                            ("card", "Card Services"),
                            ("loan", "Loan Services"),
                            ("investment", "Investment Services"),
                            ("bill_payment", "Bill Payments"),
                            ("payment", "Payments"),
                            ("kyc", "KYC/Verification"),
                            ("security", "Security & Privacy"),
                            ("technical", "Technical Issues"),
                            ("feedback", "Feedback & Suggestions"),
                            ("other", "Other"),
                        ],
                        max_length=20,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("usage_count", models.PositiveIntegerField(default=0)),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_responses",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "support_canned_responses",
                "ordering": ["-usage_count", "title"],
            },
        ),
        migrations.CreateModel(
            name="FAQ",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted_at", models.DateTimeField(null=True)),
                (
                    "faq_id",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("question", models.CharField(max_length=500)),
                ("answer", models.TextField()),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("account", "Account Issues"),
                            ("wallet", "Wallet & Balance"),
                            ("transaction", "Transaction Issues"),
                            ("card", "Card Services"),
                            ("loan", "Loan Services"),
                            ("investment", "Investment Services"),
                            ("bill_payment", "Bill Payments"),
                            ("payment", "Payments"),
                            ("kyc", "KYC/Verification"),
                            ("security", "Security & Privacy"),
                            ("technical", "Technical Issues"),
                            ("feedback", "Feedback & Suggestions"),
                            ("other", "Other"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "order",
                    models.PositiveIntegerField(default=0, help_text="Display order"),
                ),
                ("is_published", models.BooleanField(default=True)),
                ("view_count", models.PositiveIntegerField(default=0)),
                ("helpful_count", models.PositiveIntegerField(default=0)),
                ("not_helpful_count", models.PositiveIntegerField(default=0)),
                ("tags", models.JSONField(blank=True, default=list)),
            ],
            options={
                "verbose_name": "FAQ",
                "verbose_name_plural": "FAQs",
                "db_table": "support_faqs",
                "ordering": ["order", "-created_at"],
                "indexes": [
                    models.Index(
                        fields=["category", "is_published"],
                        name="support_faq_categor_696325_idx",
                    ),
                    models.Index(
                        fields=["is_published", "order"],
                        name="support_faq_is_publ_c5b5a7_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="SupportTicket",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted_at", models.DateTimeField(null=True)),
                (
                    "ticket_id",
                    models.UUIDField(
                        db_index=True, default=uuid.uuid4, editable=False, unique=True
                    ),
                ),
                (
                    "ticket_number",
                    models.CharField(
                        db_index=True, editable=False, max_length=20, unique=True
                    ),
                ),
                ("subject", models.CharField(max_length=255)),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("account", "Account Issues"),
                            ("wallet", "Wallet & Balance"),
                            ("transaction", "Transaction Issues"),
                            ("card", "Card Services"),
                            ("loan", "Loan Services"),
                            ("investment", "Investment Services"),
                            ("bill_payment", "Bill Payments"),
                            ("payment", "Payments"),
                            ("kyc", "KYC/Verification"),
                            ("security", "Security & Privacy"),
                            ("technical", "Technical Issues"),
                            ("feedback", "Feedback & Suggestions"),
                            ("other", "Other"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("urgent", "Urgent"),
                        ],
                        default="medium",
                        max_length=10,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("open", "Open"),
                            ("in_progress", "In Progress"),
                            ("waiting_customer", "Waiting on Customer"),
                            ("waiting_agent", "Waiting on Agent"),
                            ("resolved", "Resolved"),
                            ("closed", "Closed"),
                            ("reopened", "Reopened"),
                        ],
                        default="open",
                        max_length=20,
                    ),
                ),
                ("description", models.TextField()),
                ("assigned_at", models.DateTimeField(blank=True, null=True)),
                ("related_transaction_id", models.UUIDField(blank=True, null=True)),
                ("related_wallet_id", models.UUIDField(blank=True, null=True)),
                ("related_loan_id", models.UUIDField(blank=True, null=True)),
                ("related_investment_id", models.UUIDField(blank=True, null=True)),
                ("first_response_at", models.DateTimeField(blank=True, null=True)),
                ("resolved_at", models.DateTimeField(blank=True, null=True)),
                ("closed_at", models.DateTimeField(blank=True, null=True)),
                ("reopened_at", models.DateTimeField(blank=True, null=True)),
                (
                    "satisfaction_rating",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Customer satisfaction rating 1-5",
                        null=True,
                    ),
                ),
                ("feedback", models.TextField(blank=True)),
                ("tags", models.JSONField(blank=True, default=list)),
                (
                    "internal_notes",
                    models.TextField(
                        blank=True, help_text="Internal notes (not visible to customer)"
                    ),
                ),
                (
                    "assigned_to",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="assigned_tickets",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="support_tickets",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "support_tickets",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="TicketEscalation",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted_at", models.DateTimeField(null=True)),
                (
                    "escalation_id",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("reason", models.TextField()),
                ("resolved", models.BooleanField(default=False)),
                ("resolved_at", models.DateTimeField(blank=True, null=True)),
                (
                    "escalated_from",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="escalations_made",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "escalated_to",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="escalations_received",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "ticket",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="escalations",
                        to="support.supportticket",
                    ),
                ),
            ],
            options={
                "db_table": "ticket_escalations",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="TicketMessage",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted_at", models.DateTimeField(null=True)),
                (
                    "message_id",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("message", models.TextField()),
                (
                    "is_internal",
                    models.BooleanField(
                        default=False,
                        help_text="Internal note (not visible to customer)",
                    ),
                ),
                ("is_from_customer", models.BooleanField(default=True)),
                ("is_read", models.BooleanField(default=False)),
                ("read_at", models.DateTimeField(blank=True, null=True)),
                (
                    "sender",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ticket_messages",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "ticket",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="messages",
                        to="support.supportticket",
                    ),
                ),
            ],
            options={
                "db_table": "ticket_messages",
                "ordering": ["created_at"],
            },
        ),
        migrations.CreateModel(
            name="TicketAttachment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted_at", models.DateTimeField(null=True)),
                (
                    "attachment_id",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("file", models.FileField(upload_to="support/attachments/%Y/%m/%d/")),
                ("file_name", models.CharField(max_length=255)),
                (
                    "file_size",
                    models.PositiveIntegerField(help_text="File size in bytes"),
                ),
                ("file_type", models.CharField(max_length=100)),
                (
                    "ticket",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="attachments",
                        to="support.supportticket",
                    ),
                ),
                (
                    "uploaded_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "message",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="attachments",
                        to="support.ticketmessage",
                    ),
                ),
            ],
            options={
                "db_table": "ticket_attachments",
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddIndex(
            model_name="supportticket",
            index=models.Index(
                fields=["user", "status"], name="support_tic_user_id_057736_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="supportticket",
            index=models.Index(
                fields=["status", "priority"], name="support_tic_status_c8e2c5_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="supportticket",
            index=models.Index(
                fields=["category", "status"], name="support_tic_categor_276175_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="supportticket",
            index=models.Index(
                fields=["assigned_to", "status"], name="support_tic_assigne_9415d6_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="supportticket",
            index=models.Index(
                fields=["-created_at"], name="support_tic_created_76a570_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="ticketmessage",
            index=models.Index(
                fields=["ticket", "created_at"], name="ticket_mess_ticket__80bcb6_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="ticketmessage",
            index=models.Index(
                fields=["is_read", "is_from_customer"],
                name="ticket_mess_is_read_1c2101_idx",
            ),
        ),
    ]
