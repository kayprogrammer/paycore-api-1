# Generated by Django 5.2.6 on 2025-10-04 20:55

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("wallets", "0005_delete_virtualcard"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Card",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted_at", models.DateTimeField(null=True)),
                (
                    "card_id",
                    models.UUIDField(
                        db_index=True, default=uuid.uuid4, editable=False, unique=True
                    ),
                ),
                (
                    "card_type",
                    models.CharField(
                        choices=[
                            ("virtual", "Virtual Card"),
                            ("physical", "Physical Card"),
                        ],
                        default="virtual",
                        max_length=20,
                    ),
                ),
                (
                    "card_brand",
                    models.CharField(
                        choices=[
                            ("visa", "Visa"),
                            ("mastercard", "Mastercard"),
                            ("verve", "Verve"),
                        ],
                        default="visa",
                        max_length=20,
                    ),
                ),
                (
                    "card_number",
                    models.CharField(db_index=True, max_length=19, unique=True),
                ),
                ("card_holder_name", models.CharField(max_length=100)),
                (
                    "expiry_month",
                    models.PositiveIntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(12),
                        ]
                    ),
                ),
                ("expiry_year", models.PositiveIntegerField()),
                ("cvv", models.CharField(max_length=4)),
                (
                    "card_provider",
                    models.CharField(
                        choices=[
                            ("flutterwave", "Flutterwave"),
                            ("sudo", "Sudo"),
                            ("stripe", "Stripe"),
                            ("paystack", "Paystack"),
                        ],
                        help_text="Provider managing this card",
                        max_length=20,
                    ),
                ),
                (
                    "provider_card_id",
                    models.CharField(
                        db_index=True,
                        help_text="Provider's internal card ID",
                        max_length=100,
                    ),
                ),
                (
                    "provider_metadata",
                    models.JSONField(
                        blank=True, default=dict, help_text="Provider-specific metadata"
                    ),
                ),
                (
                    "is_test_mode",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if card is in test/sandbox mode",
                    ),
                ),
                (
                    "spending_limit",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Maximum amount that can be spent per transaction",
                        max_digits=20,
                        null=True,
                    ),
                ),
                (
                    "daily_limit",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Maximum daily spending limit",
                        max_digits=20,
                        null=True,
                    ),
                ),
                (
                    "monthly_limit",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Maximum monthly spending limit",
                        max_digits=20,
                        null=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("inactive", "Inactive"),
                            ("frozen", "Frozen"),
                            ("blocked", "Blocked"),
                            ("expired", "Expired"),
                        ],
                        default="inactive",
                        max_length=20,
                    ),
                ),
                ("is_frozen", models.BooleanField(default=False)),
                (
                    "total_spent",
                    models.DecimalField(decimal_places=2, default=0, max_digits=20),
                ),
                (
                    "daily_spent",
                    models.DecimalField(decimal_places=2, default=0, max_digits=20),
                ),
                (
                    "monthly_spent",
                    models.DecimalField(decimal_places=2, default=0, max_digits=20),
                ),
                ("last_used_at", models.DateTimeField(blank=True, null=True)),
                (
                    "last_daily_reset",
                    models.DateField(default=django.utils.timezone.now),
                ),
                (
                    "last_monthly_reset",
                    models.DateField(default=django.utils.timezone.now),
                ),
                ("allow_online_transactions", models.BooleanField(default=True)),
                ("allow_atm_withdrawals", models.BooleanField(default=True)),
                (
                    "allow_international_transactions",
                    models.BooleanField(default=False),
                ),
                ("nickname", models.CharField(blank=True, max_length=50, null=True)),
                (
                    "created_for_merchant",
                    models.CharField(
                        blank=True,
                        help_text="Specific merchant this card was created for (e.g., Netflix)",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "billing_address",
                    models.JSONField(
                        blank=True, default=dict, help_text="Billing address for card"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="cards",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "wallet",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="cards",
                        to="wallets.wallet",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["user", "status"], name="cards_card_user_id_698812_idx"
                    ),
                    models.Index(
                        fields=["wallet"], name="cards_card_wallet__d87f34_idx"
                    ),
                    models.Index(
                        fields=["card_provider", "provider_card_id"],
                        name="cards_card_card_pr_10609a_idx",
                    ),
                ],
            },
        ),
    ]
