# Generated by Django 5.2.6 on 2025-10-19 02:38

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="KYCVerification",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted_at", models.DateTimeField(null=True)),
                (
                    "kyc_id",
                    models.UUIDField(
                        db_index=True, default=uuid.uuid4, editable=False, unique=True
                    ),
                ),
                (
                    "level",
                    models.CharField(
                        choices=[
                            ("tier_1", "Tier 1 - Basic"),
                            ("tier_2", "Tier 2 - Intermediate"),
                            ("tier_3", "Tier 3 - Advanced"),
                        ],
                        default="tier_1",
                        max_length=10,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("under_review", "Under Review"),
                            ("approved", "Approved"),
                            ("rejected", "Rejected"),
                            ("expired", "Expired"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("first_name", models.CharField(max_length=100)),
                ("last_name", models.CharField(max_length=100)),
                ("middle_name", models.CharField(blank=True, max_length=100)),
                ("date_of_birth", models.DateField()),
                (
                    "nationality",
                    models.CharField(
                        help_text="ISO 3166-1 alpha-2 country code", max_length=2
                    ),
                ),
                ("address_line_1", models.CharField(max_length=255)),
                ("address_line_2", models.CharField(blank=True, max_length=255)),
                ("city", models.CharField(max_length=100)),
                ("state", models.CharField(max_length=100)),
                ("postal_code", models.CharField(max_length=20)),
                (
                    "country",
                    models.CharField(
                        help_text="ISO 3166-1 alpha-2 country code", max_length=2
                    ),
                ),
                (
                    "document_type",
                    models.CharField(
                        choices=[
                            ("national_id", "National ID"),
                            ("passport", "Passport"),
                            ("drivers_license", "Driver's License"),
                            ("residence_permit", "Residence Permit"),
                            ("utility_bill", "Utility Bill (Proof of Address)"),
                            ("bank_statement", "Bank Statement"),
                            ("selfie", "Selfie with ID"),
                        ],
                        max_length=20,
                    ),
                ),
                ("document_number", models.CharField(max_length=100)),
                ("document_expiry_date", models.DateField(blank=True, null=True)),
                ("document_issuing_country", models.CharField(max_length=2)),
                ("reviewed_at", models.DateTimeField(blank=True, null=True)),
                ("rejection_reason", models.TextField(blank=True)),
                ("expires_at", models.DateTimeField(blank=True, null=True)),
                ("notes", models.TextField(blank=True)),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                (
                    "reviewed_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="kyc_reviews",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="kyc_verifications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "kyc_verifications",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="KYCDocument",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted_at", models.DateTimeField(null=True)),
                (
                    "document_id",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                (
                    "document_type",
                    models.CharField(
                        choices=[
                            ("national_id", "National ID"),
                            ("passport", "Passport"),
                            ("drivers_license", "Driver's License"),
                            ("residence_permit", "Residence Permit"),
                            ("utility_bill", "Utility Bill (Proof of Address)"),
                            ("bank_statement", "Bank Statement"),
                            ("selfie", "Selfie with ID"),
                        ],
                        max_length=20,
                    ),
                ),
                ("file", models.FileField(upload_to="compliance/kyc/%Y/%m/%d/")),
                ("file_name", models.CharField(max_length=255)),
                ("file_size", models.PositiveIntegerField()),
                ("is_verified", models.BooleanField(default=False)),
                ("verified_at", models.DateTimeField(blank=True, null=True)),
                (
                    "kyc_verification",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="documents",
                        to="compliance.kycverification",
                    ),
                ),
            ],
            options={
                "db_table": "kyc_documents",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="SanctionsScreening",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted_at", models.DateTimeField(null=True)),
                (
                    "screening_id",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("full_name", models.CharField(max_length=255)),
                ("date_of_birth", models.DateField(blank=True, null=True)),
                ("nationality", models.CharField(blank=True, max_length=2)),
                ("is_match", models.BooleanField(default=False)),
                (
                    "match_score",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Match confidence score 0-100",
                        max_digits=5,
                        null=True,
                    ),
                ),
                (
                    "matched_lists",
                    models.JSONField(
                        default=list, help_text="Lists where matches were found"
                    ),
                ),
                ("match_details", models.JSONField(blank=True, default=dict)),
                ("provider", models.CharField(blank=True, max_length=100)),
                ("provider_reference", models.CharField(blank=True, max_length=255)),
                ("reviewed_at", models.DateTimeField(blank=True, null=True)),
                ("false_positive", models.BooleanField(default=False)),
                ("review_notes", models.TextField(blank=True)),
                (
                    "reviewed_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="sanctions_reviews",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sanctions_screenings",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "sanctions_screenings",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="TransactionMonitoring",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted_at", models.DateTimeField(null=True)),
                (
                    "monitoring_id",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("transaction_id", models.UUIDField(db_index=True)),
                (
                    "alert_type",
                    models.CharField(
                        help_text="Type of suspicious activity detected", max_length=100
                    ),
                ),
                ("risk_score", models.DecimalField(decimal_places=2, max_digits=5)),
                (
                    "risk_level",
                    models.CharField(
                        choices=[
                            ("low", "Low Risk"),
                            ("medium", "Medium Risk"),
                            ("high", "High Risk"),
                            ("critical", "Critical Risk"),
                        ],
                        max_length=20,
                    ),
                ),
                ("description", models.TextField()),
                (
                    "triggered_rules",
                    models.JSONField(
                        default=list, help_text="Rules that triggered this alert"
                    ),
                ),
                (
                    "transaction_amount",
                    models.DecimalField(decimal_places=2, max_digits=20),
                ),
                ("transaction_type", models.CharField(max_length=50)),
                ("transaction_date", models.DateTimeField()),
                ("is_resolved", models.BooleanField(default=False)),
                ("resolution", models.TextField(blank=True)),
                ("resolved_at", models.DateTimeField(blank=True, null=True)),
                (
                    "is_reported",
                    models.BooleanField(
                        default=False, help_text="Reported to authorities"
                    ),
                ),
                ("reported_at", models.DateTimeField(blank=True, null=True)),
                (
                    "resolved_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="resolved_alerts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="transaction_monitorings",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "transaction_monitorings",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="AMLCheck",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted_at", models.DateTimeField(null=True)),
                (
                    "check_id",
                    models.UUIDField(
                        db_index=True, default=uuid.uuid4, editable=False, unique=True
                    ),
                ),
                (
                    "transaction_id",
                    models.UUIDField(
                        blank=True, help_text="Related transaction if any", null=True
                    ),
                ),
                (
                    "check_type",
                    models.CharField(
                        help_text="Type of AML check performed", max_length=50
                    ),
                ),
                (
                    "risk_score",
                    models.DecimalField(
                        decimal_places=2, help_text="Risk score 0-100", max_digits=5
                    ),
                ),
                (
                    "risk_level",
                    models.CharField(
                        choices=[
                            ("low", "Low Risk"),
                            ("medium", "Medium Risk"),
                            ("high", "High Risk"),
                            ("critical", "Critical Risk"),
                        ],
                        max_length=20,
                    ),
                ),
                ("passed", models.BooleanField(default=True)),
                (
                    "flagged_items",
                    models.JSONField(
                        default=list, help_text="List of flagged items/reasons"
                    ),
                ),
                (
                    "provider",
                    models.CharField(
                        blank=True,
                        help_text="External AML service provider",
                        max_length=100,
                    ),
                ),
                ("provider_reference", models.CharField(blank=True, max_length=255)),
                ("provider_response", models.JSONField(blank=True, default=dict)),
                ("requires_manual_review", models.BooleanField(default=False)),
                ("reviewed_at", models.DateTimeField(blank=True, null=True)),
                ("review_notes", models.TextField(blank=True)),
                (
                    "reviewed_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="aml_reviews",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="aml_checks",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "aml_checks",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["user", "risk_level"],
                        name="aml_checks_user_id_1b91e5_idx",
                    ),
                    models.Index(
                        fields=["risk_level", "requires_manual_review"],
                        name="aml_checks_risk_le_9531ad_idx",
                    ),
                    models.Index(
                        fields=["transaction_id"], name="aml_checks_transac_bd478e_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="ComplianceReport",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted_at", models.DateTimeField(null=True)),
                (
                    "report_id",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("report_type", models.CharField(max_length=100)),
                ("report_period_start", models.DateField()),
                ("report_period_end", models.DateField()),
                ("summary", models.TextField()),
                ("total_transactions", models.PositiveIntegerField(default=0)),
                ("flagged_transactions", models.PositiveIntegerField(default=0)),
                ("total_users_screened", models.PositiveIntegerField(default=0)),
                ("high_risk_users", models.PositiveIntegerField(default=0)),
                (
                    "file",
                    models.FileField(
                        blank=True, null=True, upload_to="compliance/reports/%Y/%m/"
                    ),
                ),
                (
                    "data",
                    models.JSONField(default=dict, help_text="Detailed report data"),
                ),
                (
                    "generated_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="generated_reports",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "compliance_reports",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["report_type", "-created_at"],
                        name="compliance__report__86af4a_idx",
                    )
                ],
            },
        ),
        migrations.AddIndex(
            model_name="kycverification",
            index=models.Index(
                fields=["user", "status"], name="kyc_verific_user_id_8bfe00_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="kycverification",
            index=models.Index(
                fields=["status", "level"], name="kyc_verific_status_8cf549_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="kycverification",
            index=models.Index(
                fields=["document_number"], name="kyc_verific_documen_17ce21_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="sanctionsscreening",
            index=models.Index(
                fields=["user", "is_match"], name="sanctions_s_user_id_a6e3eb_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="sanctionsscreening",
            index=models.Index(
                fields=["is_match", "false_positive"],
                name="sanctions_s_is_matc_0d71d2_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="transactionmonitoring",
            index=models.Index(
                fields=["user", "risk_level"], name="transaction_user_id_36a4a3_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="transactionmonitoring",
            index=models.Index(
                fields=["transaction_id"], name="transaction_transac_b51dc6_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="transactionmonitoring",
            index=models.Index(
                fields=["risk_level", "is_resolved"],
                name="transaction_risk_le_06f322_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="transactionmonitoring",
            index=models.Index(
                fields=["alert_type", "is_resolved"],
                name="transaction_alert_t_be89b2_idx",
            ),
        ),
    ]
